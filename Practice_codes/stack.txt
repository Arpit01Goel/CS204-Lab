#I shall implement stack in assemble now
#The commands will be in memory. 

#lets just implement one stack with adddress s0
#save all results in s11
.data 
 comm: .byte 1 3 2 5 5 5 4 5 3 5 2 5 1 1 2 3 4 4 4 5 10 5 9 5 8 4 4 4 4 4

.text
jal x0, main
push:
    lb a0, 0(a1)
    addi a1, a1, 1
    
    #a0 have the element we need to push in this stack
    lb t0, 0(s0)
    addi t0, t0, 1
    sb a0, 0(s0)
    addi s0, s0, 1
    sb t0, 0(s0)
    add s11, a0, x0
    jalr x0, ra, 0
    

pop:
    
    lb t0, 0(s0)
    addi t0, t0, -1
    addi s0, s0, -1
    lb s11, 0(s0)
    sb t0, 0(s0)
    jalr x0, ra, 0
    

empty:
    #check if empty
    lb t0, 0(s0)
    seq s11, x0, t0
    jalr x0, ra, 0

top:
    #save the top element in s11
    addi sp, sp, 8
    sw ra, 4(sp)
    
    jal ra, empty
    lw ra, 4(sp)
    addi sp, sp, -8
    
        beq x0, s11, not_empty
            #its empty so set value -1
            addi s11, x0, -1 
            jalr x0, ra, 0
              
            
            
        not_empty:
            lb s11, -1(s0)
            jalr x0, ra, 0

size:
    #save the size in s11
    lb s11, 0(s0)
    jalr x0, ra, 0

main:
    lui s0, 0x10000
    addi s0 s0 0x100
    lui a1, 65536
    addi a1, a1, 0
    addi s10, s10, 23     #number of commands
    add a2, x0, x0
    addi s4, x0, 1
    addi s5, x0, 2
    addi s6, x0, 3
    addi s7, x0, 4
    addi s8, x0, 5
    auipc ra, 0
    addi ra, ra, 8
    loop:
        beq a2, s10, exit
        lb a3, 0(a1)
        addi a1, a1, 1
        addi a2, a2, 1
        beq s4, a3, size
        beq s5, a3, top
        beq s6, a3, empty
        beq s7, a3, pop
        beq s8, a3, push
        
        
        
        
        
        
exit:
    ecall
        
    
    

    